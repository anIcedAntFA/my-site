name: CI

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

# Cancel in-progress runs for same workflow and ref
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  NODE_ENV: test

jobs:
  # Job 1: Code Quality Checks (fast checks first)
  quality:
    name: Code Quality
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.bun/install/cache
            node_modules
          key: ${{ runner.os }}-bun-${{ hashFiles('bun.lock') }}
          restore-keys: |
            ${{ runner.os }}-bun-

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Generate Panda CSS
        run: bun run panda:gen

      - name: Cache styled-system
        uses: actions/cache@v4
        with:
          path: styled-system
          key: ${{ runner.os }}-panda-${{ hashFiles('panda.config.ts', 'src/theme/**/*.ts', 'src/**/*.{ts,tsx,astro}') }}

      # Run checks in parallel using matrix strategy
      - name: Run Quality Checks
        run: |
          # Run checks in parallel using background processes
          bun run format & FORMAT_PID=$!
          bun run lint & LINT_PID=$!
          bun run check:circular-deps & CIRCULAR_PID=$!

          # Wait for all processes and collect exit codes
          wait $FORMAT_PID; FORMAT_EXIT=$?
          wait $LINT_PID; LINT_EXIT=$?
          wait $CIRCULAR_PID; CIRCULAR_EXIT=$?

          # Check if any failed
          if [ $FORMAT_EXIT -ne 0 ]; then
            echo "‚ùå Format check failed"
            exit 1
          fi

          if [ $LINT_EXIT -ne 0 ]; then
            echo "‚ùå Lint check failed"
            exit 1
          fi

          if [ $CIRCULAR_EXIT -ne 0 ]; then
            echo "‚ùå Circular dependencies detected"
            exit 1
          fi

          echo "‚úÖ All quality checks passed"

  # Job 2: Type Checking (can run in parallel with quality)
  typecheck:
    name: Type Check
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Restore dependencies cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.bun/install/cache
            node_modules
          key: ${{ runner.os }}-bun-${{ hashFiles('bun.lock') }}
          restore-keys: |
            ${{ runner.os }}-bun-

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Restore Panda cache
        uses: actions/cache@v4
        with:
          path: styled-system
          key: ${{ runner.os }}-panda-${{ hashFiles('panda.config.ts', 'src/theme/**/*.ts', 'src/**/*.{ts,tsx,astro}') }}

      - name: Generate Panda CSS (if cache miss)
        run: |
          # Force regeneration for prose recipe PR
          echo "ÔøΩ Force regenerating Panda CSS for prose recipe changes..."
          bun run panda:gen

      - name: Type Check
        run: bun run check:types

  # Job 3: Build (depends on quality and typecheck)
  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [quality, typecheck]
    timeout-minutes: 15
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Restore dependencies cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.bun/install/cache
            node_modules
          key: ${{ runner.os }}-bun-${{ hashFiles('bun.lock') }}
          restore-keys: |
            ${{ runner.os }}-bun-

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Restore Panda cache
        uses: actions/cache@v4
        with:
          path: styled-system
          key: ${{ runner.os }}-panda-${{ hashFiles('panda.config.ts', 'src/theme/**/*.ts', 'src/**/*.{ts,tsx,astro}') }}

      - name: Generate Panda CSS (if cache miss)
        run: |
          echo "üîß Force regenerating Panda CSS for theme changes..."
          bun run panda:gen

      - name: Build
        run: bun run build

      - name: Cache build artifacts
        uses: actions/cache@v4
        with:
          path: dist
          key: ${{ runner.os }}-build-${{ github.sha }}

      # Upload build artifacts for inspection
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: build-artifacts
          path: |
            dist/
            .astro/
          retention-days: 7

  # Job 4: Bundle Analysis (optional, runs after build)
  analyze:
    name: Bundle Analysis
    runs-on: ubuntu-latest
    needs: [build]
    if: github.event_name == 'pull_request'
    timeout-minutes: 5
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2

      - name: Restore build cache
        uses: actions/cache@v4
        with:
          path: dist
          key: ${{ runner.os }}-build-${{ github.sha }}

      - name: Analyze bundle size
        run: |
          echo "## üì¶ Bundle Analysis" >> $GITHUB_STEP_SUMMARY
          echo "| File | Size |" >> $GITHUB_STEP_SUMMARY
          echo "|------|------|" >> $GITHUB_STEP_SUMMARY

          if [ -d "dist" ]; then
            find dist -name "*.js" -o -name "*.css" | while read file; do
              size=$(du -h "$file" | cut -f1)
              echo "| $file | $size |" >> $GITHUB_STEP_SUMMARY
            done
          else
            echo "| No build artifacts found | - |" >> $GITHUB_STEP_SUMMARY
          fi

  # Summary job for required status checks
  ci-success:
    name: CI Success
    runs-on: ubuntu-latest
    needs: [quality, typecheck, build]
    if: always()
    steps:
      - name: Check CI Results
        run: |
          if [ "${{ needs.quality.result }}" != "success" ] || [ "${{ needs.typecheck.result }}" != "success" ] || [ "${{ needs.build.result }}" != "success" ]; then
            echo "‚ùå CI failed"
            exit 1
          fi
          echo "‚úÖ All CI checks passed"
